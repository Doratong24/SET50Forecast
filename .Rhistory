flds[1][333]
flds[1][1]
flds[1][2]
a = c(1,2,3,4,5)
a<-a[sample(nrow(a)),]
a<-a[sample(nrow(a))]
a
print(a)
a[1]
a[2]
a = c(c(1,2,3),c(4,5,6),c(7,8,9))
a<-a[sample(nrow(a))]
source('~/Downloads/svmTree.R')
data = cbind(featureSliding,resultLag)
nrow(data)
ncol(data)
folds <- cut(seq(1,nrow(data)),breaks=10,labels=FALSE)
folds
count(folds)
for(i in 1:10){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- data[testIndexes, ]
trainData <- data[-testIndexes, ]
#Use the test and train data partitions however you desire...
}
testIndexes <- which(folds==i,arr.ind=TRUE)
testIndexes
data[-testIndexes, ]
data[testIndexes, 102]
data[-testIndexes,]
nrow(featureSliding)
nrow(data[testIndexes,])
nrow(-data[testIndexes,])
nrow(-data[testIndexes,1])
-data[testIndexes,1]
data[testIndexes,1 ]
data[testIndexes,1 ]
data[-testIndexes,1 ]
nrow(data[-testIndexes,1])
nrow(data[-testIndexes,])
nrow(data[testIndexes,])
featureTrain <- trainData[,ncol(trainData)
#Use the test and train data partitions however you desire...
}
days = 1
featureTrain <-featureSliding[days:(days+699),]
classTrain <- resultLag[(days+1):(days+700)]
featureTest <- featureSliding[(days+700):(days+999),]
classTest <- resultLag[(days+701):(days+1000)]
svmModel = svm(x = featureTrain, y = classTrain, type = "C", kernel = "radial")
#svmModelPolynomial = svm(x = featureTrain, y = classTrain, type = "C",degree = "10", kernel = "polynomial")
dtModel = rpart(classTrain~.,data = featureTrain, method = "class")
pruneTree<- prune(dtModel, cp=   dtModel$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
fitTree <- predict(pruneTree,featureTest,type="class")
fitSVM <- predict(svmModel,featureTest,type="class")
tableTree = table(Actual = classTest, Fitted = fitTree)
tableSVM = table(Actual = classTest, Fitted = fitSVM)
featureTrain <- trainData[,ncol(trainData)
featureTrain
featureTrain <- trainData[,ncol(trainData)]
featureTrain
source('~/.active-rstudio-document')
nrow(resultLag)
count(resultLag)
ncol(resultLag)
nrow(resultLag[1])
row()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
resultLag = resultLag[(2:3957-windowDays)]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/10fold.R')
source('~/10fold.R')
nrow(fitTree)
count(fitTree)
count(classTest)
featureTrain <- trainData[,1:ncol(trainData)-1]
classTrain <- trainData[,ncol(trainData)]
featureTest <- testData[,1:ncol(trainData)-1]
classTest <- testData[,ncol(trainData)]
nrow(classTest)
nrow(featureTest)
count(classTest)
svmModel = svm(x = featureTrain, y = classTrain, type = "C", kernel = "radial")
fitTree <- predict(svmModel,featureTest,type="class")
count(fitTree)
nrow(featureTest)
nrow(featureTest)
featureTest
count(fitTree)
source('~/10fold.R')
fitTree <- predict(svmModel,featureTest,type="class")
fitTree
count(fitTree)
count(fitTree)
count(fitTree)
row(featureTest)
nrow(featureTest)
row(featureTest)
nrow(featureTest)
source('~/10fold.R')
nrow(featureTrain)
nrow(featureTest)
fitTree <- predict(svmModel,featureTest,type="class")
count(fitTree)
count(classTest)
nrow(classTrain)
count(classTrain)
count(classTest)
count(featureTest)
nrow(featureTest)
count(classTest)
nrow(featureTest)
fitTree <- predict(svmModel,featureTest,type="class")
count(fitTree)
fitTree <- predict(dtModel,featureTest,type="class")
count(fitTree)
fitTree <- predict(svmModel,featureTest)
count(fitTree)
source('~/10fold.R')
source('~/10fold.R')
source('~/10fold.R')
source('~/10fold.R')
tseries <- xts(SET50$SET50.Close, SET50$Timestamp)
Price_Ema5 <- EMA(SET50$SET50.Open, n = 5, wilder = FALSE, ration = NULL)
obvData <- OBV(SET50$SET50.Open, SET50$Vol)
macdtemp = MACD(SET50$SET50.Close, nFast = 12, nSlow = 26, nSig = 9, maType = EMA, percent = TRUE)
macd = macdtemp[,1]-macdtemp[,2]
rsi <- RSI(SET50$SET50.Close, n = 14, maType = EMA, SET50$Vol)
vma <- EVWMA(SET50$SET50.Close, SET50$Vol, ratio = 1)
features <- cbind(Price_Ema5, obvData, macd, rsi, vma)
Price <- SET50$SET50.Close - SET50$SET50.Open
UpDown <- ifelse(Price > 0, 1, -1)
windowDays =30
TP = 0
TN= 0
FP = 0
FN = 0
emaLag = CasesSeries(features[,1], c(1:windowDays), start = 1, end = 3957)
obvLag = CasesSeries(features[,2], c(1:windowDays), start = 1, end = 3957)
colnames(obvLag) <- paste("OBV", colnames(obvLag), sep = "_")
colnames(emaLag) <- paste("EMA", colnames(emaLag), sep = "_")
macdLag = CasesSeries(features[,3], c(1:windowDays), start = 1, end = 3957)
colnames(macdLag) <- paste("MACD", colnames(macdLag), sep = "_")
vmaLag = CasesSeries(features[,5], c(1:windowDays), start = 1, end = 3957)
colnames(vmaLag) <- paste("VMA", colnames(vmaLag), sep = "_")
rsiLag = CasesSeries(features[,4], c(1:windowDays), start = 1, end = 3957)
colnames(rsiLag) <- paste("RSI", colnames(rsiLag), sep = "_")
featureSliding = cbind(emaLag,obvLag,macdLag,vmaLag,rsiLag)
featureSliding = featureSliding[1:(nrow(featureSliding)-1),]
resultLagTemp  = CasesSeries(UpDown, c(1:windowDays), start = 1, end = 3957)
resultLag = resultLagTemp$y
resultLag = resultLag[2:(3957-windowDays)]
data2 = cbind(featureSliding,resultLag)
data <- data2[sample(nrow(data2)),]
folds <- cut(seq(1,nrow(data)),breaks=10,labels=FALSE)
for(i in 1:10){
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- data[testIndexes, ]
trainData <- data[-testIndexes, ]
featureTrain <- trainData[,1:ncol(trainData)-1]
classTrain <- trainData[,ncol(trainData)]
featureTest <- testData[,1:ncol(trainData)-1]
classTest <- testData[,ncol(trainData)]
#Use the test and train data partitions however you desire...
#dtModel = rpart(classTrain~.,data = featureTrain, method = "class")
#svmModel = svm(x = featureTrain, y = classTrain, type = "C", kernel = "radial")
#fitTree <- predict(svmModel,featureTest,type="class")
pruneTree<- prune(dtModel, cp =   dtModel$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
fitTree <- predict(pruneTree,featureTest,type="class")
tableTree = table(Actual = classTest, Fitted = fitTree)
TP = TP+(100*tableTree[2,2]/(tableTree[1,1]+tableTree[1,2]+tableTree[2,1]+tableTree[2,2]))
TN = TN+(100*tableTree[1,1]/(tableTree[1,1]+tableTree[1,2]+tableTree[2,1]+tableTree[2,2]))
FP = FP + (100*tableTree[1,2]/(tableTree[1,1]+tableTree[1,2]+tableTree[2,1]+tableTree[2,2]))
FN = FN + (100*tableTree[2,1]/(tableTree[1,1]+tableTree[1,2]+tableTree[2,1]+tableTree[2,2]))
print(tableTree)
}
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- data[testIndexes, ]
trainData <- data[-testIndexes, ]
featureTrain <- trainData[,1:ncol(trainData)-1]
classTrain <- trainData[,ncol(trainData)]
featureTest <- testData[,1:ncol(trainData)-1]
classTest <- testData[,ncol(trainData)]
pruneTree<- prune(dtModel, cp =   dtModel$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
fitTree <- predict(pruneTree,featureTest,type="class")
tableTree = table(Actual = classTest, Fitted = fitTree)
tableTree = table(Actual = classTest, Fitted = fitTree)
fitTree <- predict(pruneTree,featureTest,type="class")
source('~/10fold.R')
source('~/10fold.R')
source('~/10fold.R')
source('~/10fold.R')
UpDown = features[,6]
colnames(UpDown)
colnames(UpDown)
library("quantmod")
library("lubridate")
library("e1071")
library("xts")
library("TTR")
library("plyr")
library("rminer")
library("rpart")
library("rpart.plot")
library("C50")
tseries <- xts(SET50$SET50.Close, SET50$Timestamp)
Price_Ema5 <- EMA(SET50$SET50.Open, n = 5, wilder = FALSE, ration = NULL)
obvData <- OBV(SET50$SET50.Open, SET50$Vol)
macdtemp = MACD(SET50$SET50.Close, nFast = 12, nSlow = 26, nSig = 9, maType = EMA, percent = TRUE)
macd = macdtemp[,1]-macdtemp[,2]
rsi <- RSI(SET50$SET50.Close, n = 14, maType = EMA, SET50$Vol)
vma <- EVWMA(SET50$SET50.Close, SET50$Vol, ratio = 1)
Price <- SET50$SET50.Close - SET50$SET50.Open
UpDown <- ifelse(Price > 0, 'Up', 'Down')
closePrice <-SET50$SET50.Close
features <- cbind(Price_Ema5, obvData, macd, rsi, vma,UpDown)
features<-features[34:nrow(features),]
UpDown = features[,6]
colnames(UpDown)
UpDown
UpDown = features[,6]
features =features[,1:5]
colnames(features)
source('~/10foldC50.R')
source('~/10foldC50.R')
source('~/10foldC50.R')
library("quantmod")
library("lubridate")
library("e1071")
library("xts")
library("TTR")
library("plyr")
library("rminer")
library("rpart")
library("rpart.plot")
library("C50")
tseries <- xts(SET50$SET50.Close, SET50$Timestamp)
Price_Ema5 <- EMA(SET50$SET50.Open, n = 5, wilder = FALSE, ration = NULL)
obvData <- OBV(SET50$SET50.Open, SET50$Vol)
macdtemp = MACD(SET50$SET50.Close, nFast = 12, nSlow = 26, nSig = 9, maType = EMA, percent = TRUE)
macd = macdtemp[,1]-macdtemp[,2]
rsi <- RSI(SET50$SET50.Close, n = 14, maType = EMA, SET50$Vol)
vma <- EVWMA(SET50$SET50.Close, SET50$Vol, ratio = 1)
Price <- SET50$SET50.Close - SET50$SET50.Open
UpDown <- ifelse(Price > 0, 'Up', 'Down')
closePrice <-SET50$SET50.Close
features <- cbind(Price_Ema5, obvData, macd, rsi, vma,UpDown)
features<-features[34:nrow(features),]
UpDown = features[,6]
features =features[,1:5]
windowDays =50
TP = 0
TN= 0
FP = 0
FN = 0
emaLag = CasesSeries(features[,1], c(1:windowDays))
obvLag = CasesSeries(features[,2], c(1:windowDays))
colnames(obvLag) <- paste("OBV", colnames(obvLag), sep = "_")
colnames(emaLag) <- paste("EMA", colnames(emaLag), sep = "_")
macdLag = CasesSeries(features[,3], c(1:windowDays))
colnames(macdLag) <- paste("MACD", colnames(macdLag), sep = "_")
vmaLag = CasesSeries(features[,5], c(1:windowDays))
colnames(vmaLag) <- paste("VMA", colnames(vmaLag), sep = "_")
rsiLag = CasesSeries(features[,4], c(1:windowDays))
colnames(rsiLag) <- paste("RSI", colnames(rsiLag), sep = "_")
featureSliding = cbind(emaLag,obvLag,macdLag,vmaLag,rsiLag)
featureSliding = featureSliding[1:(nrow(featureSliding)-1),]
resultLagTemp  = CasesSeries(UpDown, c(1:windowDays))
resultLag = resultLagTemp$y
resultUpDown = resultLag[2:3874]
data2 = cbind(featureSliding,resultUpDown)
resultLagTemp  = CasesSeries(UpDown, c(1:windowDays))
resultLag = resultLagTemp$y
resultUpDown = resultLag[2:3874]
data2 = cbind(featureSliding,resultUpDown)
data <- data2[sample(nrow(data2)),]
folds <- cut(seq(1,nrow(data)),breaks=10,labels=FALSE)
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- data[testIndexes, ]
trainData <- data[-testIndexes, ]
featureTrain <- trainData[,1:(ncol(trainData)-1)]
UpDownC <- trainData[,(ncol(trainData))]
featureTest <- testData[,1:(ncol(trainData)-1)]
UpDownT <- testData[,(ncol(testData))]
svmModel = svm(x = featureTrain, y = classTrain, type = "C", kernel = "radial")
fitTree <- predict(dtModel,featureTest)
svmModel = svm(x = featureTrain, y = classTrain, type = "C", kernel = "radial")
svmModel = svm(x = featureTrain, y = UpDownC, type = "C", kernel = "radial")
source('~/10foldC50.R')
colnames(featureTrain)
source('~/10foldC50.R')
CasesSeries(c(1:10),c(1:3))
library("quantmod")
library("lubridate")
library("e1071")
library("xts")
library("TTR")
library("plyr")
library("rminer")
library("rpart")
library("rpart.plot")
library("C50")
CasesSeries(c(1:10),c(1:3))
a = CasesSeries(c(1:10),c(1:3))
-a$y
emaLag = CasesSeries(features[,1], c(1:windowDays))
emaLag[1,]
emaLag[,1]
source('~/10foldC50.R')
FP = FP + (100*tableTree[1,2]/(tableTree[1,1]+tableTree[1,2]+tableTree[2,1]+tableTree[2,2]))
source('~/10foldC50.R')
source('~/10foldC50.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
nrow(tabletree)
nrow(tableTree)
ncol(tableTree)
ncol(colnames(tableTree)
)
ncol(colnames(tableTree))
source('~/C50V1.R')
tryCatch()
a = c(12,3,4)
c[6]
a[6]
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
a = c(1,2,3)
a[42,23]
a[42]
tableTree
source('~/RPARTV1_Classification.R')
tableTree
tableTree[2,2]
try(tableTree[2,2])
tryCatch(tableTree[2,2],x = 0)
tryCatch(tableTree[2,2],error = function(e) print(NA))
tryCatch(tableTree[2,2],error = function(e) print(NA))
tryCatch(tableTree[2,2],error = function(e) x = 0)
x
tryCatch(tableTree[2,2],error = function(e) )
source('~/RPARTV1_Classification.R')
tryCatch(tableTree[2,2],error = function(e) 0
)
source('~/RPARTV1_Classification.R')
totalPercent = tryCatch(100*tableTree[2,2],0)
totalPercent = tryCatch(100*tableTree[2,2],error = function(e) 0)
totalPercent
tableTree[2,2]
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/RPARTC.R')
source('~/RPARTC.R')
summary(SET50)
source('~/C50V1.R')
library("xts")
tseries <- xts(SET50$SET50.Close, SET50$Timestamp)
fit1 <- StructTS(tseries, type = "BSM")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
fit1 <- StructTS(tseries, type = "BSM")
install.packages("forecast")
fit1 <- StructTS(tseries, type = "BSM")
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
a = CasesSeries(c(1,2,3,4,5,6,7,8,9,10),c(1:3))
a
a = CasesSeries(c(1,2,3,4,5,6,7,8,9,10),c(1:3))
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
plot(v = c(4,5,2,3,5,2))
plot(v = c(4,5,2,3,5,2), x = c(1:16))
plot(v = c(4,5,2,3,5,2), x = c(1,2,3,4,5,6))
plot(c(4,5,2,3,5,2)
)
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
source('~/RPARTV1_Classification.R')
TN= 0
source('~/RPARTV1_Classification.R')
source('~/SVMV1.R')
source('~/SVMV1.R')
source('~/Desktop/TSP/SVM.R')
shiny::runApp('Desktop/TSP')
runApp('Desktop/TSP')
source('~/Desktop/TSP/SVM.R')
runApp('Desktop/TSP')
runApp('Desktop/TSP')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
svmT(windowDays,foldNumber,emaB,obvB,macdB,rsiB,vmaB,rocB,cmoB,cciB,wprB,ahead)
source('~/Desktop/TSP/SVM.R')
source('~/Desktop/TSP/SVM.R')
source('~/C50V1.R')
Price_Ema10 <- EMA(SET50$SET50.Open, n = 10, wilder = FALSE, ration = NULL)
obvData <- OBV(SET50$SET50.Open, SET50$Vol)
macdtemp = MACD(SET50$SET50.Close, nFast = 12, nSlow = 26, nSig = 9, maType = EMA, percent = TRUE)
macd = macdtemp[,1]-macdtemp[,2]
rsi <- RSI(SET50$SET50.Close, n = 14, maType = EMA, SET50$Vol)
vma <- EVWMA(SET50$SET50.Close, SET50$Vol, ratio = 1)
roc <- ROC(SET50$SET50.Close,n = 2)
cmo <- CMO(SET50$SET50.Close,n=14)
cci <- CCI(SET50$SET50.Close,n=14)
wpr <- WPR(SET50$SET50.Close,n=14)
features <- cbind(Price_Ema10, obvData, macd, rsi, vma,roc,cmo,cci,wpr)
features<-features[34:(nrow(features)-ahead),]
features <- scale(features)
Price1 = SET50$SET50.Close[(34+ahead):length(SET50$SET50.Close)]
Price2 = SET50$SET50.Close[34:(length(SET50$SET50.Close)-ahead)]
Price <- Price2-Price1
UpDown <- ifelse(Price > 0, 1, 0)
count(UpDown)
Price_Ema10 <- EMA(SET50$SET50.Open, n = 10, wilder = FALSE, ration = NULL)
obvData <- OBV(SET50$SET50.Open, SET50$Vol)
macdtemp = MACD(SET50$SET50.Close, nFast = 12, nSlow = 26, nSig = 9, maType = EMA, percent = TRUE)
macd = macdtemp[,1]-macdtemp[,2]
rsi <- RSI(SET50$SET50.Close, n = 14, maType = EMA, SET50$Vol)
vma <- EVWMA(SET50$SET50.Close, SET50$Vol, ratio = 1)
roc <- ROC(SET50$SET50.Close,n = 2)
cmo <- CMO(SET50$SET50.Close,n=14)
cci <- CCI(SET50$SET50.Close,n=14)
wpr <- WPR(SET50$SET50.Close,n=14)
count(wpr)
head(wpr)
wpr
rsi
View(wpr)
Price_Ema10 <- EMA(SET50$SET50.Open, n = 10, wilder = FALSE, ration = NULL)
obvData <- OBV(SET50$SET50.Open, SET50$Vol)
macdtemp = MACD(SET50$SET50.Close, nFast = 12, nSlow = 26, nSig = 9, maType = EMA, percent = TRUE)
macd = macdtemp[,1]-macdtemp[,2]
rsi <- RSI(SET50$SET50.Close, n = 14, maType = EMA, SET50$Vol)
vma <- EVWMA(SET50$SET50.Close, SET50$Vol, ratio = 1)
roc <- ROC(SET50$SET50.Close,n = 2)
cmo <- CMO(SET50$SET50.Close,n=14)
cci <- CCI(SET50$SET50.Close,n=14)
wpr <- WPR(SET50$SET50.Close,n=14)
features <- cbind(Price_Ema10, obvData, macd, rsi, vma,roc,cmo,cci,wpr)
View(features)
shiny::runApp('Desktop/TSP')
runApp('Desktop/TSP')
runApp('Desktop/TSP')
runApp('Desktop/TSP')
source('~/Desktop/TSP/SVM.R')
runApp('Desktop/TSP')
